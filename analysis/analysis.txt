This is the analysis for Markov Part 2, Fall 2018

Include your name and net id here. Answer the questions from the assignment 
that are reproduced below

(1) Determine (from running Benchmark.java) how long it takes for 
BaseMarkov to generate 2,000, 4,000, 8,000, 16,000, and 32,000 
random characters using the default file and an order 5 Markov Model. 
Include these timings in your report. 
The program also generates 4,096 characters using texts that increase in 
size from 496,768 characters to 4,967,680 characters (10 times the number).  
Do you the timings support the O(NT) analysis for BaseMarkov?
time	source	#chars
0.525	507914	2000
0.974	507914	4000
1.771	507914	8000
3.692	507914	16000
7.279	507914	32000

0.929	507914	4096
1.810	1015828	4096
2.794	1523742	4096
3.741	2031656	4096
4.649	2539570	4096
3.946	3047484	4096
4.082	3555398	4096
4.193	4063312	4096
4.580	4571226	4096
5.163	5079140	4096

For 2000 chars it takes 0.525. For 4000 chars it takes 0.974. For 8000 it takes 1.771. For 16000 chars it takes 
3.692. For 32000 chars it takes 7.279. These timings do support the complexity analysis O(NT). When the change of N 
or text size is held constant, the time increases depending only on T. However, when the change of T or number of
characters is held constant the time increases depending only on N. This follows the O(N*T) complexity.


(2) Determine (from running Benchmark.java) how long it takes for 
EfficientMarkov to generate 2,000, 4,000, 8,000, 16,000, and 32,000 
random characters using the default file and an order 5 Markov Model. 
Include these timings in your report. 
The program also generates 4,096 characters using texts that increase in 
size from 496,768 characters to 4,967,680 characters (10 times the number).  
Do you the timings support the O(N+T) analysis for EfficientMarkov?

time	source	#chars
0.334	507914	2000
0.218	507914	4000
0.213	507914	8000
0.198	507914	16000
0.192	507914	32000

0.170	507914	4096
0.298	1015828	4096
0.466	1523742	4096
0.645	2031656	4096
0.785	2539570	4096
1.478	3047484	4096
1.657	3555398	4096
2.987	4063312	4096
2.427	4571226	4096
2.597	5079140	4096


This data seems to be somewhat in agreement with the complexity O(N+T) analysis. For the most part, the times are smaller
than the times with complexity O(NT). This also has a smaller change in time with change of number of char and change of size of 
file. The change in time also never seemed to change greatly, there was almost a consistent change in time. This supports the idea that it is O(N+T) and not O(NT).

(3)The tests in the class Benchmark use an order-5 Markov Model. 
Run tests that you think are appropriate to determine if the order of the 
Markov Model has a significant impact on the running time for BaseMarkov. 
Explain your reasoning.

Keeping the char number at 2000 and the file size the same, I incrementally changed the order. 

Order 1 time: 0.072
Order 2 time: 0.082
Order 4 time: 0.088
Order 8 time: 0.250
Order 16 time: 0.552
Order 32 time: 0.665
Order 64 time: 1.139
Order 128 time: 1.903
While it does seem like the order does have some affect on the time, it seems that it doesnt have a major effect the time until after order 16. This, however, could 
have a major impact on time considering if one wanted to use a larger order number. It is worth some comment however to highlight that most order numbers will not be this large.
Because it wont be as large, the time could possibly not matter. Only at large numbers does it matter.